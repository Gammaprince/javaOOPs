The wrapper class in Java provides the mechanism to convert primitive into object and object into primitive.

USE OF WRAPPER CLASS : 
1 Change the value in Method: Java supports only call by value. So, if we pass a primitive value, it will not change the original value. But, if we convert the primitive value in an object, it will change the original value.
2 Serialization: We need to convert the objects into streams to perform the serialization. If we have a primitive value, we can convert it in objects through the wrapper classes.
3 Synchronization: Java synchronization works with objects in Multithreading.
4 java.util package: The java.util package provides the utility classes to deal with objects.
5 Collection Framework: Java collection framework works with objects only. All classes of the collection framework (ArrayList, LinkedList, Vector, HashSet, LinkedHashSet, TreeSet, PriorityQueue, ArrayDeque, etc.) deal with objects only.

Autoboxing : The automatic conversion of primitive data type into its corresponding wrapper class is known as autoboxing.
             Ex: //Java program to convert primitive into objects  
                   //Autoboxing example of int to Integer  
                   public class WrapperExample1{  
                   public static void main(String args[]){  
                   //Converting int into Integer  
                   int a=20;  
                   Integer i=Integer.valueOf(a);//converting int into Integer explicitly  
                   Integer j=a;//autoboxing, now compiler will write Integer.valueOf(a) internally  
                

Unboxing : The automatic conversion of wrapper type into its corresponding primitive type is known as unboxing.
           It is the reverse process of autoboxing. Since Java 5, 
           we do not need to use the intValue() method of wrapper classes to convert the wrapper type into primitives.
           Ex : public class WrapperExample2{    
                public static void main(String args[]){    
                //Converting Integer to int    
                Integer a=new Integer(3);    
                int i=a.intValue();//converting Integer to int explicitly  
                int j=a;//unboxing, now compiler will write a.intValue() internally    
